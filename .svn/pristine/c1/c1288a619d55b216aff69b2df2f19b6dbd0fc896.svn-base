package fun;

import net.sf.json.JSONObject;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.io.*;
import java.math.BigDecimal;
import java.net.*;
import java.util.List;
import java.util.Map;

public class HttpRequest {
	private static Log log = LogFactory.getLog(HttpRequest.class);
	public static String ip = common.getIp();
	public static String accepter[] = {"chai.dan@zhaopin.com.cn","yanyan.cao@zhaopin.com.cn","xinyi.liu@zhaopin.com.cn","yanyan.guo@zhaopin.com.cn"};
    public static String projectName = "JobRpc_API";
    
    private static boolean hasHeader = false;
	private static String header = null;
	private static String at = "";
	private static String rt = "";
	private static String fromsystem = "";
	private static String deviceid = "";
	private static String cookie = "";

    public static boolean isHasHeader() {
		return hasHeader;
	}

	public void setHasHeader(boolean hasHeader) {
		this.hasHeader = hasHeader;
	}

	public void setHeader(String header) {
		this.header = header;
	}
	
	public void setAt(String At) {
		at = At;
	}
	public void setRt(String Rt) {
		rt = Rt;
	}
	public void setfromsystem(String Fromsystem){
		fromsystem = Fromsystem;
	}
	public void setdeviceid(String Deviceid){
		deviceid = Deviceid;
	}
	public void setcookie(String Cookie){
		cookie = Cookie;
	}
	
	private static URLConnection isIPCall(URLConnection conn){
		if(isHasHeader() && !"".equals(header) && header != null){
			conn.setRequestProperty(header.substring(0, header.indexOf("=")),header.substring(header.indexOf("=")+1));
			
		}
		return conn;
	}
	
	private static HttpURLConnection isIPCall(HttpURLConnection huc){
		if(isHasHeader() && !"".equals(header) && header != null){
			huc.setRequestProperty(header.substring(0, header.indexOf("=")),header.substring(header.indexOf("=")+1));
		}
		return huc;
	}

	/**
	 * 向指定 URL 发送post方法的请求
	 * 
	 * @param url
	 *            发送请求的 URL
	 * @param param
	 *            请求参数，请求参数应该是 name1=value1&name2=value2 的形式。
	 * @return 所代表远程资源的响应结果
	 */
	public static String SendPost_keyValue(String url, String param) {
		PrintWriter out = null;
		BufferedReader in = null;
		String result = "";

		try {
			URLEncoder.encode(url, "utf-8");
			URL realUrl = new URL(url);
			// 打开和URL之间的链接
			URLConnection conn = realUrl.openConnection();
			//如果需要特殊请求头则设置特殊请求头
			conn = isIPCall(conn);
			// 设置通用的请求属性
			conn.setRequestProperty("accept", "*/*");
			conn.setRequestProperty("connection", "Keep-Alive");
			conn.setRequestProperty("user-agent",
					"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");
			conn.setRequestProperty("at", at);
			conn.setRequestProperty("rt", rt);
			conn.setRequestProperty("fromsystem", fromsystem);
			conn.setRequestProperty("deviceid", deviceid);
			conn.setRequestProperty("Cookie", cookie);
			// 发送POST请求必须设置如下两行
			conn.setDoOutput(true);
			conn.setDoInput(true);
			// 获取URLConnection对象对应的输出流
			out = new PrintWriter(conn.getOutputStream());
			// 发送请求参数
			out.print(param);
			// flush输出流的缓冲
			out.flush();
			int code = ((HttpURLConnection) conn).getResponseCode();
			//// 定义BufferedReader输入流来读取URL的响应
			if(code==200){
				in = new BufferedReader(new InputStreamReader(
						((HttpURLConnection) conn).getInputStream(), "utf-8"));
			}else{
				in = new BufferedReader(new InputStreamReader(
						((HttpURLConnection) conn).getErrorStream(), "utf-8"));
			}
			String line;
			while ((line = in.readLine()) != null) {
				result += line;
			}
		} catch (MalformedURLException e) {
			result = e.getMessage();
			log.error("执行Http Post请求" + url + "时，发生异常!" + e);
		} catch (IOException e) {
			result = e.getMessage();
			log.error("打开和" + url + "之间的链接时，发生异常!" + e);
		} finally {
			if (out != null) {
				out.close();
			}
			if (in != null) {
				try {
					in.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

		return result;
	}

	/**
	 * 向指定 URL 发送POST方法的请求
	 * 
	 * @param url
	 *            发送请求的 URL
	 *  param
	 *            请求参数，请求参数应该是json字符串 的形式。
	 * @return 所代表远程资源的响应结果
	 */
	public  String SendPost_json(String url, String parameters) {
        String result = "";
		try {
			//URLEncoder.encode(url, "utf-8");
			URL surl = new URL(url);// 创建连接
			System.out.println("^^^^POST_Json_Content^^^^");
			System.out.println(url);
			System.out.println(parameters);
			HttpURLConnection connection = (HttpURLConnection) surl
					.openConnection();
			
			// 设置通用的请求属性
//			connection.setRequestProperty("Content-Type", "utf-8");
			connection.setDoOutput(true);
			connection.setDoInput(true);
			connection.setUseCaches(false);
			
			connection.setInstanceFollowRedirects(true);
			//如果需要特殊请求头则设置特殊请求头
			connection = isIPCall(connection);
			
			connection.setRequestMethod("POST"); // 设置请求方式
			connection.setRequestProperty("Accept", "application/json"); // 设置接收数据的格式
			connection.setRequestProperty("Content-Type", "application/json;charset=utf-8"); // 设置发送数据的格式
			connection.setRequestProperty("Accept", "application/json"); // 设置接收数据的格式
			connection.setRequestProperty("at", at);
			connection.setRequestProperty("rt", rt);
			connection.setRequestProperty("fromsystem", fromsystem);
			connection.setRequestProperty("deviceid", deviceid);
			connection.setRequestProperty("Cookie", cookie);
			connection.connect();
			// 获取URLConnection对象对应的输出流
			OutputStreamWriter out = new OutputStreamWriter(
					connection.getOutputStream(),"utf-8"); // utf-8编码
			//发送请求
			out.append(parameters);
			out.flush();
			out.close();
			// 读取响应
			int length = (int) connection.getContentLength();// 获取长度
			int code = connection.getResponseCode();
			
			InputStream is = null;
			if(code==200){
				is = connection.getInputStream();  
			}else{
				is = connection.getErrorStream();
			}
			if(length == -1){
				length = Integer.MAX_VALUE/100;
			}
			byte[] data = new byte[length];
			byte[] temp = new byte[512];
			int readLen = 0;
			int destPos = 0;
			while ((readLen = is.read(temp)) > 0) {
				System.arraycopy(temp, 0, data, destPos, readLen);
				destPos += readLen;
			}
			result = new String(data, "UTF-8"); // utf-8编码
		} catch (Exception e) {
			result = e.getMessage();
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println(result);
		return result; // 自定义错误信息
	}
	
	/**
	 * 向指定 URL 发送POST方法的请求
	 * 
	 * @param url
	 *            发送请求的 URL
	 *  param
	 *            请求参数，请求参数应该是json字符串 的形式。
	 * @return 所代表远程资源的响应结果
	 */
	public String SendPost_json_DB(String testContent,String url, String parameters) {
        String result = "";
		try {
			//URLEncoder.encode(url, "utf-8");
			Long startTime = System.nanoTime();
			URL surl = new URL(url);// 创建连接
			System.out.println("^^^^POST_Json_Content^^^^");
			System.out.println(url);
			System.out.println(parameters);
			HttpURLConnection connection = (HttpURLConnection) surl
					.openConnection();
			
			//如果需要特殊请求头则设置特殊请求头
			connection = isIPCall(connection);
			
			// 设置通用的请求属性
//			connection.setRequestProperty("Content-Type", "utf-8");
			connection.setDoOutput(true);
			connection.setDoInput(true);
			connection.setUseCaches(false);
			
			connection.setInstanceFollowRedirects(true);
			connection.setRequestMethod("POST"); // 设置请求方式
			connection.setRequestProperty("Accept", "application/json"); // 设置接收数据的格式
			connection.setRequestProperty("Content-Type", "application/json;charset=utf-8"); // 设置发送数据的格式
			connection.setRequestProperty("at", at);
			connection.setRequestProperty("rt", rt);
			connection.setRequestProperty("fromsystem", fromsystem);
			connection.setRequestProperty("deviceid", deviceid);
			connection.setRequestProperty("Cookie", cookie);

			connection.connect();
			// 获取URLConnection对象对应的输出流
			OutputStreamWriter out = new OutputStreamWriter(
					connection.getOutputStream(),"utf-8"); // utf-8编码
			//发送请求
			out.append(parameters);
			out.flush();
			out.close();
			// 读取响应
			int length = (int) connection.getContentLength();// 获取长度
			int code = connection.getResponseCode();
			InputStream is = null;
			if(code==200){
				is = connection.getInputStream();  
			}else{
				is = connection.getErrorStream();
			}
			if (length == -1) {
				length = Integer.MAX_VALUE/1000;
				}
			byte[] data = new byte[length];
			byte[] temp = new byte[512];
			int readLen = 0;
			int destPos = 0;
			while ((readLen = is.read(temp)) > 0) {
				System.arraycopy(temp, 0, data, destPos, readLen);
				destPos += readLen;
			}
			result = new String(data, "UTF-8"); // utf-8编码
		
			Long endTime = System.nanoTime();
			double resTime = (double)(endTime-startTime)/1000000000;
			BigDecimal bg = new BigDecimal(resTime);
	        resTime = bg.setScale(3, BigDecimal.ROUND_HALF_UP).doubleValue();
			String now = DateUtil.getCurrentDate("yyyy/MM/dd HH:mm:ss");
			//OperateDBUtils.ExecuteSQL("insert into apiResTime(ip,testContent,resTime,insertTime) values('"+ip+"','"+testContent+"','"+resTime+"','"+now+"')");
			if(!testContent.contains("-")){
				OperateDBUtils.ExecuteSQL("insert into projectResTime(ip,projectName,testContent,resTime,insertTime) values('"+ip+"','"+projectName+"','"+testContent+"','"+resTime+"','"+now+"')");
				if(resTime>1.5){
			    	SendMail mail = new SendMail("chai.dan@zhaopin.com.cn",accepter);
			    	mail.send("Jobrpc_Autotest接口：【"+testContent+"】执行超时", "【"+testContent+"】执行时间为"+resTime+",执行超时,请关注","","");    	
				}
			}else{
				OperateDBUtils.ExecuteSQL("insert into projectResTime(ip,projectName,testContent,resTime,insertTime) values('"+ip+"','"+projectName+"','"+testContent+"','"+resTime+"','"+now+"')");
				if(resTime>3.5){
			    	SendMail mail = new SendMail("chai.dan@zhaopin.com.cn",accepter);
			    	mail.send("Jobrpc_Autotest接口：【"+testContent+"】执行超时", "【"+testContent+"】执行时间为"+resTime+",执行超时,请关注","","");
				}
			}
			} catch (Exception e) {
			  result = e.getMessage();
			  // TODO Auto-generated catch block
			  e.printStackTrace();
		}
		System.out.println(result);
		return result; // 自定义错误信息
	}
	

	/**
	 * 向指定URL发送GET方法的请求
	 * 
	 * @param url
	 *            发送请求的URL
	 * param
	 *            请求参数，请求参数应该是 name1=value1&name2=value2 的形式。
	 * @return URL 所代表远程资源的响应结果
	 */
	public String sendGet(String url) {
		String result = "";
		BufferedReader in = null;
		try {
			URL realUrl = new URL(url);
			System.out.println("****GET_DB_Content****");
			System.out.println(url);
			// 打开和URL之间的连接
			URLConnection connection = realUrl.openConnection();
			
			//如果需要特殊请求头则设置特殊请求头
			connection = isIPCall(connection);
			
			// 设置通用的请求属性
			connection.setRequestProperty("accept", "*/*");
			connection.setRequestProperty("connection", "Keep-Alive");
			connection.setRequestProperty("user-agent",
					"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");
			connection.setRequestProperty("at", at);
			connection.setRequestProperty("rt", rt);
			connection.setRequestProperty("fromsystem", fromsystem);
			connection.setRequestProperty("deviceid", deviceid);
			connection.setRequestProperty("Cookie", cookie);
			// 建立实际的连接
			connection.connect();
			int code = ((HttpURLConnection) connection).getResponseCode();
			//// 定义BufferedReader输入流来读取URL的响应
			if(code==200){
				in = new BufferedReader(new InputStreamReader(
						((HttpURLConnection) connection).getInputStream(), "utf-8"));
			}else{
				in = new BufferedReader(new InputStreamReader(
						((HttpURLConnection) connection).getErrorStream(), "utf-8"));
			}
			String line;
			while ((line = in.readLine()) != null) {
				result += line;
			}
		} catch (Exception e) {
			result = e.getMessage();
			System.out.println("发送GET请求出现异常！" + e);
			e.printStackTrace();
		}
		// 使用finally块来关闭输入流
		finally {
			try {
				if (in != null) {
					in.close();
				}
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		System.out.println(result);
		return result;
	}
	
	public String sendGet_getheaderkey(String url) {
		String result = "";
		BufferedReader in = null;
		try {
			URL realUrl = new URL(url);
			// 打开和URL之间的连接
			URLConnection connection = realUrl.openConnection();
			
			//如果需要特殊请求头则设置特殊请求头
			connection = isIPCall(connection);
			
			// 设置通用的请求属性
			connection.setRequestProperty("accept", "*/*");
			connection.setRequestProperty("connection", "Keep-Alive");
			connection.setRequestProperty("user-agent",
					"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");
			// 建立实际的连接
			connection.connect();
			Map< String,List< String>> map = connection.getHeaderFields();
			String checkId = connection.getHeaderField("checkId");

			int code = ((HttpURLConnection) connection).getResponseCode();
			//// 定义BufferedReader输入流来读取URL的响应
			if(code==200){
				in = new BufferedReader(new InputStreamReader(
						((HttpURLConnection) connection).getInputStream(), "utf-8"));

			}else{
				in = new BufferedReader(new InputStreamReader(
						((HttpURLConnection) connection).getErrorStream(), "utf-8"));
			}
			String line;
			while ((line = in.readLine()) != null) {
				result += line;
			}
			result += checkId;
		} catch (Exception e) {
			result = e.getMessage();
			System.out.println("发送GET请求出现异常！" + e);
			e.printStackTrace();
		}
		// 使用finally块来关闭输入流
		finally {
			try {
				if (in != null) {
					in.close();
				}
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		return result;
	}
	
	/**
	 * 向指定URL发送GET方法的请求
	 * 
	 * @param url
	 *            发送请求的URL
	 * param
	 *            请求参数，请求参数应该是 name1=value1&name2=value2 的形式。
	 * @return URL 所代表远程资源的响应结果
	 */
	public String sendGet_DB(String testContent,String url) {
		String result = "";
		BufferedReader in = null;
		try {
			long startTime = System.nanoTime();
			URL realUrl = new URL(url);
			System.out.println("****GET_DB_Content****");
			System.out.println(url);
			// 打开和URL之间的连接
			URLConnection connection = realUrl.openConnection();
			
			//如果需要特殊请求头则设置特殊请求头
			connection = isIPCall(connection);
			
			// 设置通用的请求属性
			connection.setRequestProperty("accept", "*/*");
			connection.setRequestProperty("connection", "Keep-Alive");
//			connection.setRequestProperty("Content-Type", "application/json;charset=utf-8"); 
			connection.setRequestProperty("user-agent",
					"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");
			connection.setRequestProperty("at", at);
			connection.setRequestProperty("rt", rt);
			connection.setRequestProperty("fromsystem", fromsystem);
			connection.setRequestProperty("deviceid", deviceid);
			connection.setRequestProperty("Cookie", cookie);
			// 建立实际的连接
			connection.connect();

			int code = ((HttpURLConnection) connection).getResponseCode();
			//// 定义BufferedReader输入流来读取URL的响应
			if(code==200){
				in = new BufferedReader(new InputStreamReader(
						((HttpURLConnection) connection).getInputStream(), "utf-8"));
			}else{
				in = new BufferedReader(new InputStreamReader(
						((HttpURLConnection) connection).getErrorStream(), "utf-8"));
			}

			String line;
			while ((line = in.readLine()) != null) {
				result += line;

			}
			long endTime = System.nanoTime();
			double resTime = (double)(endTime-startTime)/1000000000;
			BigDecimal bg = new BigDecimal(resTime);
	        resTime = bg.setScale(3, BigDecimal.ROUND_HALF_UP).doubleValue();
			String now = DateUtil.getCurrentDate("yyyy/MM/dd HH:mm:ss");
			//OperateDBUtils.ExecuteSQL("insert into apiResTime(ip,testContent,resTime,insertTime) values('"+ip+"','"+testContent+"','"+resTime+"','"+now+"')");
			if(!testContent.contains("-")){
				OperateDBUtils.ExecuteSQL("insert into projectResTime(ip,projectName,testContent,resTime,insertTime) values('"+ip+"','"+projectName+"','"+testContent+"','"+resTime+"','"+now+"')");
				if(resTime>1.5){
			    	SendMail mail = new SendMail("chai.dan@zhaopin.com.cn",accepter);
			    	mail.send("Jobrpc_Autotest接口：【"+testContent+"】执行超时", "【"+testContent+"】执行时间为"+resTime+",执行超时,请关注","","");
			    }
			}else{
				OperateDBUtils.ExecuteSQL("insert into projectResTime(ip,testContent,resTime,insertTime) values('"+ip+"','"+testContent+"','"+resTime+"','"+now+"')");
				if(resTime>3.5){
			    	SendMail mail = new SendMail("chai.dan@zhaopin.com.cn",accepter);
			    	mail.send("Jobrpc_Autotest接口：【"+testContent+"】执行超时", "【"+testContent+"】执行时间为"+resTime+",执行超时,请关注","","");
			    }
			}
			
		} catch (Exception e) {
			result = e.getMessage();
			System.out.println("发送GET请求出现异常！" + e);
			e.printStackTrace();
		}
		// 使用finally块来关闭输入流
		finally {
			try {
				if (in != null) {
					in.close();
				}
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		System.out.println(result);
		return result;
		
	}

	public String sendGet_DB_checkId(String testContent, String url) {
		BufferedReader in = null;
		String result ="";
		try {
			long startTime = System.nanoTime();
			URL realUrl = new URL(url);
			System.out.println("****GET_DB_Content****");
			System.out.println(url);
			// 打开和URL之间的连接
			URLConnection connection = realUrl.openConnection();

			//如果需要特殊请求头则设置特殊请求头
			connection = isIPCall(connection);

			// 设置通用的请求属性
			connection.setRequestProperty("accept", "*/*");
			connection.setRequestProperty("connection", "Keep-Alive");
//			connection.setRequestProperty("Content-Type", "application/json;charset=utf-8");
			connection.setRequestProperty("user-agent",
					"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");
			connection.setRequestProperty("at", at);
			connection.setRequestProperty("rt", rt);
			connection.setRequestProperty("fromsystem", fromsystem);
			connection.setRequestProperty("deviceid", deviceid);
			connection.setRequestProperty("Cookie", cookie);
			// 建立实际的连接
			connection.connect();
			String checkId = null;
			int code = ((HttpURLConnection) connection).getResponseCode();
			//// 定义BufferedReader输入流来读取URL的响应
			if(code==200){
				in = new BufferedReader(new InputStreamReader(
						((HttpURLConnection) connection).getInputStream(), "utf-8"));
				checkId = ((HttpURLConnection) connection).getHeaderField("checkId");
			}else{
				in = new BufferedReader(new InputStreamReader(
						((HttpURLConnection) connection).getErrorStream(), "utf-8"));
			}
			JSONObject jsonObject = new JSONObject();
			jsonObject.put("checkId",checkId);
			result = jsonObject.toString();
		} catch (Exception e) {
			result = e.getMessage();
			System.out.println("发送GET请求出现异常！" + e);
			e.printStackTrace();
		}
		// 使用finally块来关闭输入流
		finally {
			try {
				if (in != null) {
					in.close();
				}
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		System.out.println(result);
		return result;

	}
	
	public static void main(String args[]) {
//		String result = "42[\"message\",\"{\\\"UserId\\\":\\\"5573971@2$1\\\",\\\"MsgType\\\":\\\"LOGINSTATUS\\\"}\"]";

		//result = sendGet("http://172.17.6.25:8080/jobrpc/order/query?orderId=352212");
		//		// 保存职位接口
//		result = SendPost_json(
//				"http://platform.zpidc.com/api/organs/2/jobs",
//				"{\"orgId\": 2,\"userId\": 123321, \"jobAture\": 0,\"jobType\": 36,\"jobTitle\": \"新增职位测试\",\"city\": 0,\"cqId\": 1110,\"jobAddress\": null, \"longitude\": null,\"latitude\": null,\"zoomLevel\": 0, \"maxSalary\": 6000,\"minSalary\": 4000, \"quantity\": 2,\"minEducation\": 2,\"minYear\": 3,\"jobDescription\": \"中关村工业园招保安一名\",\"benefit\": null,\"modifeidstaffid\":123321,\"applicationmethod\":1, \"jobFocus\": null}");
//		System.out.println("-----------result:" + result);
//
//		// 查看职位列表
//		result = sendGet("http://platform.zpidc.com/api/organs/2/jobs?query=&status=1&page=1&pagesize=10&isissue=1");
//		System.out.println("-----------result:" + result);
//		System.out.println(result);
		
//		String xx = "x-token=abc";
//		System.err.println(xx.substring(0, xx.indexOf("=")));
//		System.err.println(xx.substring(xx.indexOf("=")+1));
//		
	}
}
